# Example Nginx configuration for RequestBite Slingshot Proxy
# This configuration shows how to integrate the Lua proxy with OpenResty/Nginx

# Main nginx configuration
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Basic HTTP configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Lua settings
    lua_package_path "/path/to/requestbite-slingshot/proxy/?.lua;;";
    lua_code_cache on;  # Set to 'off' during development
    
    # Upstream servers (if needed)
    upstream backend {
        server 127.0.0.1:5173;  # Your frontend app
    }
    
    # Main server block
    server {
        listen 80;
        server_name localhost;
        
        # Enable CORS for all responses
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        add_header Access-Control-Max-Age "86400" always;
        
        # Handle preflight OPTIONS requests
        location / {
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
                add_header Access-Control-Max-Age "86400" always;
                return 204;
            }
            
            # Proxy to your frontend application
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Proxy endpoints
        location /proxy/request {
            # Only allow POST requests
            if ($request_method != POST) {
                return 405;
            }
            
            # Set response headers
            add_header Content-Type "application/json" always;
            
            # Handle the request with Lua
            content_by_lua_block {
                local proxy = require('proxy')
                
                -- Read request body
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if not body then
                    ngx.status = 400
                    ngx.say('{"error": "Request body is required"}')
                    return
                end
                
                -- Process the request
                local result = proxy.proxy_request_view(body)
                
                -- Return JSON response
                ngx.say(require('cjson').encode(result))
            }
        }
        
        location /proxy/form {
            # Only allow POST requests
            if ($request_method != POST) {
                return 405;
            }
            
            # Set response headers
            add_header Content-Type "application/json" always;
            
            # Handle the request with Lua
            content_by_lua_block {
                local proxy = require('proxy')
                
                -- Read request data
                ngx.req.read_body()
                local args = ngx.req.get_uri_args()
                local post_args = ngx.req.get_post_args()
                
                -- Process the form request
                local result = proxy.proxy_form_data_view(args, post_args, {})
                
                -- Return JSON response
                ngx.say(require('cjson').encode(result))
            }
        }
        
        # Health check endpoint
        location /proxy/health {
            access_log off;
            content_by_lua_block {
                ngx.header['Content-Type'] = 'application/json'
                ngx.say('{"status": "healthy", "timestamp": "' .. os.date() .. '"}')
            }
        }
        
        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            content_by_lua_block {
                ngx.header['Content-Type'] = 'application/json'
                ngx.say('{"error": "Not found"}')
            }
        }
        
        location = /50x.html {
            content_by_lua_block {
                ngx.header['Content-Type'] = 'application/json'
                ngx.say('{"error": "Internal server error"}')
            }
        }
    }
    
    # SSL/HTTPS server (optional)
    server {
        listen 443 ssl;
        server_name localhost;
        
        # SSL configuration
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # Same location blocks as above
        location /proxy/request {
            content_by_lua_block {
                local proxy = require('proxy')
                ngx.req.read_body()
                local body = ngx.req.get_body_data()
                
                if not body then
                    ngx.status = 400
                    ngx.say('{"error": "Request body is required"}')
                    return
                end
                
                local result = proxy.proxy_request_view(body)
                ngx.say(require('cjson').encode(result))
            }
        }
        
        location /proxy/form {
            content_by_lua_block {
                local proxy = require('proxy')
                ngx.req.read_body()
                local args = ngx.req.get_uri_args()
                local post_args = ngx.req.get_post_args()
                
                local result = proxy.proxy_form_data_view(args, post_args, {})
                ngx.say(require('cjson').encode(result))
            }
        }
    }
}

# Example systemd service file (save as /etc/systemd/system/nginx-proxy.service)
# [Unit]
# Description=Nginx HTTP Server with RequestBite Proxy
# After=network.target
# 
# [Service]
# Type=forking
# ExecStartPre=/usr/sbin/nginx -t
# ExecStart=/usr/sbin/nginx
# ExecReload=/bin/kill -s HUP $MAINPID
# ExecStop=/bin/kill -s QUIT $MAINPID
# PrivateTmp=true
# 
# [Install]
# WantedBy=multi-user.target